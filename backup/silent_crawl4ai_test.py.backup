#!/usr/bin/env python3
"""
Crawl4AI 로깅 비활성화 테스트
"""

import asyncio
import json
import re
from crawl4ai import AsyncWebCrawler, CrawlerRunConfig

async def silent_test():
    """로깅 없는 테스트"""
    print("Crawl4AI 조용한 테스트...")
    
    async with AsyncWebCrawler(verbose=False) as crawler:  # verbose=False
        try:
            result = await crawler.arun(url="https://www.google.com")
            
            if result.success:
                print("구글 크롤링 성공!")
                print(f"상태코드: {result.status_code}")
                print(f"콘텐츠 길이: {len(result.extracted_content)}")
                
                # TikTok 사이트 테스트
                print("\nTikTok 사이트 테스트...")
                tiktok_result = await crawler.arun(
                    url="https://ads.tiktok.com/business/creativecenter/inspiration/popular/pc/en"
                )
                
                if tiktok_result.success:
                    print("TikTok 크롤링 성공!")
                    print(f"상태코드: {tiktok_result.status_code}")
                    print(f"콘텐츠 길이: {len(tiktok_result.extracted_content)}")
                    
                    # 해시태그 찾기
                    hashtags = re.findall(r'#\w+', tiktok_result.extracted_content)
                    unique_hashtags = list(set(hashtags))
                    print(f"발견된 해시태그: {len(unique_hashtags)}개")
                    if unique_hashtags:
                        print(f"해시태그: {unique_hashtags[:10]}")
                    
                    # 비디오 ID 찾기
                    video_ids = re.findall(r'/video/(\d+)', tiktok_result.extracted_content)
                    unique_video_ids = list(set(video_ids))
                    print(f"발견된 비디오 ID: {len(unique_video_ids)}개")
                    if unique_video_ids:
                        print(f"비디오 ID: {unique_video_ids[:5]}")
                    
                    # 결과 저장
                    with open('silent_crawl4ai_result.json', 'w', encoding='utf-8') as f:
                        json.dump({
                            'success': True,
                            'status_code': tiktok_result.status_code,
                            'url': tiktok_result.url,
                            'content_length': len(tiktok_result.extracted_content),
                            'hashtags': unique_hashtags,
                            'video_ids': unique_video_ids,
                            'content_preview': tiktok_result.extracted_content[:2000]
                        }, f, ensure_ascii=False, indent=2)
                    
                    print(f"\n결과 저장: silent_crawl4ai_result.json")
                    return True
                else:
                    print(f"TikTok 크롤링 실패: {tiktok_result.error_message}")
                    return False
            else:
                print(f"구글 크롤링 실패: {result.error_message}")
                return False
                
        except Exception as e:
            print(f"오류 발생: {e}")
            return False

async def main():
    """메인 함수"""
    print("Crawl4AI 로깅 비활성화 테스트")
    print("=" * 50)
    
    success = await silent_test()
    
    print(f"\n{'=' * 50}")
    print(f"테스트 결과: {'성공' if success else '실패'}")

if __name__ == "__main__":
    asyncio.run(main())