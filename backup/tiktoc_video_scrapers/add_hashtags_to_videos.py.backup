#!/usr/bin/env python3
"""
TikTok Creative Center - 기존 120개 비디오에 해시태그 정보 추가
"""

import time
from playwright.sync_api import sync_playwright
import json
import re

def extract_hashtags_from_desc(desc):
    """
    비디오 설명에서 해시태그 추출
    """
    if not desc:
        return []
    
    hashtags = re.findall(r'#\w+', desc)
    return hashtags

def fetch_video_details_with_hashtags(video_id):
    """
    비디오 ID로 해시태그 정보 수집
    """
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        page = browser.new_page()
        
        try:
            # TikTok embed API 호출
            api_url = f"https://www.tiktok.com/api/recommend/embed_videos/?aid=1284&count=1&secUid=&cursor=0&web_id=&item_id={video_id}"
            
            response = page.request.get(api_url)
            if response.status == 200:
                data = response.json()
                
                if data.get('itemList') and len(data['itemList']) > 0:
                    video = data['itemList'][0]
                    
                    # 해시태그 추출
                    desc = video.get('desc', '')
                    hashtags = extract_hashtags_from_desc(desc)
                    
                    # 추가 정보
                    author = video.get('author', {})
                    stats = video.get('statsV2', {})
                    
                    return {
                        'hashtags': hashtags,
                        'desc': desc,
                        'author': author.get('uniqueId', ''),
                        'play_count': stats.get('playCount', '0')
                    }
            
        except Exception as e:
            print(f"비디오 {video_id} 정보 수집 실패: {e}")
            
        finally:
            browser.close()
    
    return None

def add_hashtags_to_all_videos():
    """
    모든 카테고리 비디오에 해시태그 정보 추가
    """
    print("기존 120개 비디오에 해시태그 정보 추가 시작...")
    
    # 통합 파일 읽기
    with open('tiktok_all_categories_120_videos_final.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    total_videos = 0
    updated_videos = 0
    
    # 각 카테고리별로 처리
    for category_name, category_data in data['categories'].items():
        videos = category_data.get('videos', [])
        print(f"\n=== {category_name} 카테고리 ({len(videos)}개) ===")
        
        for i, video in enumerate(videos):
            video_id = video['video_id']
            total_videos += 1
            
            print(f"  {category_name} #{i+1}: {video_id} 해시태그 수집 중...")
            
            # 해시태그 정보 수집
            details = fetch_video_details_with_hashtags(video_id)
            
            if details:
                video['hashtags'] = details['hashtags']
                video['desc'] = details['desc']
                video['author'] = details['author']
                video['play_count'] = details['play_count']
                updated_videos += 1
                
                print(f"    OK 해시태그 {len(details['hashtags'])}개: {details['hashtags'][:3]}...")
                print(f"    OK 조회수: {details['play_count']}")
                print(f"    OK 작성자: {details['author']}")
            else:
                video['hashtags'] = []
                video['desc'] = ""
                video['author'] = ""
                video['play_count'] = "0"
                print(f"    FAIL 정보 수집 실패")
            
            # 요청 간 딜레이 (API 제한 방지)
            time.sleep(1)
    
    # 통계 업데이트
    data['scrape_info']['hashtags_added'] = True
    data['scrape_info']['hashtags_timestamp'] = time.strftime("%Y-%m-%d %H:%M:%S")
    data['scrape_info']['hashtags_success_count'] = updated_videos
    
    # 결과 저장
    output_file = 'tiktok_all_categories_120_videos_with_hashtags.json'
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    
    print(f"\n{'='*70}")
    print(f"해시태그 정보 추가 완료!")
    print(f"{'='*70}")
    print(f"결과 파일: {output_file}")
    print(f"전체 비디오: {total_videos}개")
    print(f"해시태그 수집 성공: {updated_videos}개")
    print(f"성공률: {updated_videos/total_videos*100:.1f}%")
    
    # 카테고리별 해시태그 통계
    print(f"\n카테고리별 해시태그 통계:")
    all_hashtags = {}
    
    for category_name, category_data in data['categories'].items():
        videos = category_data.get('videos', [])
        category_hashtags = {}
        
        for video in videos:
            for hashtag in video.get('hashtags', []):
                category_hashtags[hashtag] = category_hashtags.get(hashtag, 0) + 1
                all_hashtags[hashtag] = all_hashtags.get(hashtag, 0) + 1
        
        top_hashtags = sorted(category_hashtags.items(), key=lambda x: x[1], reverse=True)[:5]
        print(f"  {category_name}: {len(category_hashtags)}개 유니크 해시태그")
        for hashtag, count in top_hashtags:
            print(f"    {hashtag}: {count}회")
    
    # 전체 해시태그 통계
    print(f"\n전체 해시태그 통계:")
    top_all_hashtags = sorted(all_hashtags.items(), key=lambda x: x[1], reverse=True)[:10]
    print(f"  전체 유니크 해시태그: {len(all_hashtags)}개")
    for hashtag, count in top_all_hashtags:
        print(f"    {hashtag}: {count}회")
    
    print(f"\n완료 시간: {time.strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    add_hashtags_to_all_videos()