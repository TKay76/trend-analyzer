#!/usr/bin/env python3
"""
TikTok Creative Center - 비디오 카드의 상세 정보 분석
조회수, 좋아요, 공유수, 댓글수 등 찾기
"""

import time
from playwright.sync_api import sync_playwright
from bs4 import BeautifulSoup
import json

def analyze_video_card_details():
    """
    비디오 카드에서 추가 정보 (조회수, 좋아요 등) 분석
    """
    target_url = "https://ads.tiktok.com/business/creativecenter/inspiration/popular/pc/en"
    
    print("TikTok 비디오 카드 상세 정보 분석...")
    print(f"URL: {target_url}")
    
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False)
        page = browser.new_page()
        
        try:
            print("\n페이지 로딩...")
            page.goto(target_url, timeout=30000)
            page.wait_for_timeout(5000)
            
            # 페이지 스크롤
            page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
            page.wait_for_timeout(3000)
            
            # 비디오 카드 요소들 대기
            page.wait_for_selector("div.CommonGridLayoutDataList_cardWrapper__jkA9g", timeout=10000)
            
            # HTML 분석
            html_content = page.content()
            soup = BeautifulSoup(html_content, 'html.parser')
            
            # 비디오 카드들 찾기
            video_cards = soup.select("div.CommonGridLayoutDataList_cardWrapper__jkA9g")
            print(f"발견된 비디오 카드: {len(video_cards)}개")
            
            detailed_analysis = []
            
            for i, card in enumerate(video_cards[:5]):  # 상위 5개만 상세 분석
                print(f"\n=== 비디오 카드 {i+1} 상세 분석 ===")
                
                # 기본 비디오 정보
                embed_quote = card.select_one("blockquote.IframeEmbedVideo_embedQuote__BdyWZ")
                video_id = embed_quote.get('data-video-id', '') if embed_quote else ''
                
                print(f"비디오 ID: {video_id}")
                
                # 카드의 모든 텍스트 추출
                card_text = card.get_text(separator=' | ', strip=True)
                print(f"카드 전체 텍스트: {card_text}")
                
                # 숫자 패턴 찾기 (조회수, 좋아요 등)
                import re
                
                # 큰 숫자들 찾기 (K, M, B 단위 포함)
                number_patterns = re.findall(r'[\d,]+[KMB]?(?:\.\d+[KMB]?)?', card_text)
                print(f"발견된 숫자들: {number_patterns}")
                
                # 구체적인 통계 정보 찾기
                stats_info = {}
                
                # 조회수 패턴
                views_patterns = [
                    r'(\d+(?:\.\d+)?[KMB]?)\s*(?:views?|조회)',
                    r'(\d+(?:,\d+)*)\s*(?:views?|조회)',
                ]
                
                # 좋아요 패턴  
                likes_patterns = [
                    r'(\d+(?:\.\d+)?[KMB]?)\s*(?:likes?|좋아요|hearts?)',
                    r'(\d+(?:,\d+)*)\s*(?:likes?|좋아요|hearts?)',
                ]
                
                # 공유수 패턴
                shares_patterns = [
                    r'(\d+(?:\.\d+)?[KMB]?)\s*(?:shares?|공유|share)',
                    r'(\d+(?:,\d+)*)\s*(?:shares?|공유|share)',
                ]
                
                # 댓글수 패턴
                comments_patterns = [
                    r'(\d+(?:\.\d+)?[KMB]?)\s*(?:comments?|댓글)',
                    r'(\d+(?:,\d+)*)\s*(?:comments?|댓글)',
                ]
                
                # 패턴 매칭
                for pattern in views_patterns:
                    match = re.search(pattern, card_text, re.IGNORECASE)
                    if match:
                        stats_info['views'] = match.group(1)
                        break
                
                for pattern in likes_patterns:
                    match = re.search(pattern, card_text, re.IGNORECASE)
                    if match:
                        stats_info['likes'] = match.group(1)
                        break
                
                for pattern in shares_patterns:
                    match = re.search(pattern, card_text, re.IGNORECASE)
                    if match:
                        stats_info['shares'] = match.group(1)
                        break
                
                for pattern in comments_patterns:
                    match = re.search(pattern, card_text, re.IGNORECASE)
                    if match:
                        stats_info['comments'] = match.group(1)
                        break
                
                print(f"추출된 통계: {stats_info}")
                
                # 모든 클래스와 요소들 분석
                print(f"\n카드 내부 구조 분석:")
                
                # 모든 div 요소들의 클래스 확인
                divs_with_classes = card.select("div[class]")
                unique_classes = set()
                for div in divs_with_classes:
                    classes = div.get('class', [])
                    for cls in classes:
                        unique_classes.add(cls)
                
                print(f"발견된 클래스들: {sorted(list(unique_classes))[:10]}")
                
                # span 요소들도 확인
                spans = card.select("span")
                span_texts = [span.get_text().strip() for span in spans if span.get_text().strip()]
                print(f"Span 텍스트들: {span_texts[:5]}")
                
                # 아이콘이나 SVG 요소들 확인 (통계 아이콘)
                icons = card.select("svg, i, [class*='icon']")
                print(f"아이콘 요소들: {len(icons)}개")
                
                # 메타데이터나 데이터 속성들 확인
                all_elements = card.find_all()
                data_attrs = {}
                for elem in all_elements:
                    for attr in elem.attrs:
                        if attr.startswith('data-'):
                            data_attrs[attr] = elem.attrs[attr]
                
                print(f"데이터 속성들: {list(data_attrs.keys())[:5]}")
                
                # 분석 결과 저장
                analysis_result = {
                    "rank": i + 1,
                    "video_id": video_id,
                    "full_text": card_text,
                    "detected_numbers": number_patterns,
                    "extracted_stats": stats_info,
                    "unique_classes": sorted(list(unique_classes)),
                    "span_texts": span_texts,
                    "icon_count": len(icons),
                    "data_attributes": data_attrs
                }
                
                detailed_analysis.append(analysis_result)
            
            # 결과 저장
            result = {
                "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
                "analysis_summary": {
                    "total_cards_analyzed": len(detailed_analysis),
                    "stats_found": any(a['extracted_stats'] for a in detailed_analysis)
                },
                "detailed_analysis": detailed_analysis
            }
            
            with open("video_details_analysis.json", 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2)
            
            print(f"\n분석 결과 저장: video_details_analysis.json")
            
            # 통계 정보 요약
            stats_found = False
            for analysis in detailed_analysis:
                if analysis['extracted_stats']:
                    stats_found = True
                    break
            
            if stats_found:
                print("통계 정보를 발견했습니다!")
            else:
                print("통계 정보를 찾지 못했습니다. 추가 분석이 필요할 수 있습니다.")
            
            print("\n15초 후 브라우저 종료...")
            page.wait_for_timeout(15000)
            
        except Exception as e:
            print(f"오류 발생: {e}")
            import traceback
            traceback.print_exc()
        
        finally:
            browser.close()
    
    print("비디오 카드 상세 분석 완료!")

if __name__ == "__main__":
    analyze_video_card_details()