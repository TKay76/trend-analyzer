#!/usr/bin/env python3
"""
기존 120개 비디오에 API 방법 적용하여 해시태그 수집
"""

import time
from playwright.sync_api import sync_playwright
import json
import re

def extract_hashtags_from_desc(desc):
    """
    비디오 설명에서 해시태그 추출
    """
    if not desc:
        return []
    
    hashtags = re.findall(r'#\w+', desc)
    return hashtags

def fetch_video_hashtags_by_id(page, video_id):
    """
    비디오 ID로 해시태그 정보 수집
    """
    try:
        # API 호출 (작동하는 패턴 사용)
        api_url = f"https://www.tiktok.com/api/recommend/embed_videos/?aid=1284&count=1&secUid=MS4wLjABAAAAplov3bw6JwAPxa9vOgAQs0IYguj0MnfVkuT1xAeGCs0&lang=en&item_id={video_id}"
        
        response = page.request.get(api_url, timeout=10000)
        
        if response.status == 200:
            data = response.json()
            
            if data.get('items') and len(data['items']) > 0:
                video = data['items'][0]
                
                # 해시태그 추출
                desc = video.get('desc', '')
                hashtags = extract_hashtags_from_desc(desc)
                
                # 추가 정보
                author = video.get('author', {})
                stats = video.get('statsV2', video.get('stats', {}))
                
                return {
                    'desc': desc,
                    'hashtags': hashtags,
                    'author': author.get('uniqueId', ''),
                    'play_count': stats.get('playCount', '0'),
                    'success': True
                }
        
        return {'success': False, 'error': f'API returned {response.status}'}
        
    except Exception as e:
        return {'success': False, 'error': str(e)}

def add_hashtags_to_120_videos():
    """
    기존 120개 비디오에 해시태그 정보 추가
    """
    print("기존 120개 비디오에 해시태그 정보 추가 시작...")
    
    # 통합 파일 읽기
    with open('tiktok_all_categories_120_videos_final.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    print("페이지 로딩으로 브라우저 컨텍스트 설정...")
    
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        page = browser.new_page()
        
        try:
            # 페이지 로딩으로 브라우저 컨텍스트 설정
            page.goto("https://ads.tiktok.com/business/creativecenter/inspiration/popular/pc/en", timeout=30000)
            page.wait_for_timeout(5000)
            
            total_videos = 0
            successful_updates = 0
            category_stats = {}
            
            # 각 카테고리별로 처리
            for category_name, category_data in data['categories'].items():
                videos = category_data.get('videos', [])
                category_hashtags = {}
                category_successful = 0
                
                print(f"\n=== {category_name} 카테고리 ({len(videos)}개) ===")
                
                for i, video in enumerate(videos):
                    video_id = video['video_id']
                    total_videos += 1
                    
                    print(f"  {category_name} #{i+1}: {video_id} 처리 중...")
                    
                    # 해시태그 정보 수집
                    result = fetch_video_hashtags_by_id(page, video_id)
                    
                    if result['success']:
                        video['desc'] = result['desc']
                        video['hashtags'] = result['hashtags']
                        video['author'] = result['author']
                        video['play_count'] = result['play_count']
                        video['hashtag_updated'] = True
                        
                        successful_updates += 1
                        category_successful += 1
                        
                        # 카테고리별 해시태그 통계
                        for hashtag in result['hashtags']:
                            category_hashtags[hashtag] = category_hashtags.get(hashtag, 0) + 1
                        
                        print(f"    성공: {len(result['hashtags'])}개 해시태그")
                    else:
                        video['desc'] = ""
                        video['hashtags'] = []
                        video['author'] = ""
                        video['play_count'] = "0"
                        video['hashtag_updated'] = False
                        video['error'] = result.get('error', 'Unknown error')
                        
                        print(f"    실패: {result.get('error', 'Unknown error')}")
                    
                    # API 제한 방지용 딜레이
                    time.sleep(0.5)
                
                # 카테고리 통계 저장
                category_stats[category_name] = {
                    'total_videos': len(videos),
                    'successful_updates': category_successful,
                    'unique_hashtags': len(category_hashtags),
                    'top_hashtags': dict(sorted(category_hashtags.items(), key=lambda x: x[1], reverse=True)[:10]),
                    'all_hashtags': category_hashtags
                }
                
                print(f"  {category_name} 완료: {category_successful}/{len(videos)}개 성공")
            
        except Exception as e:
            print(f"브라우저 처리 오류: {e}")
        
        finally:
            browser.close()
    
    # 전체 해시태그 통계 계산
    all_hashtags = {}
    for cat_stat in category_stats.values():
        for hashtag, count in cat_stat['all_hashtags'].items():
            all_hashtags[hashtag] = all_hashtags.get(hashtag, 0) + count
    
    # 통계 정보 업데이트
    data['scrape_info']['hashtags_added'] = True
    data['scrape_info']['hashtags_timestamp'] = time.strftime("%Y-%m-%d %H:%M:%S")
    data['scrape_info']['hashtags_success_count'] = successful_updates
    data['scrape_info']['hashtags_method'] = 'working_embed_api'
    
    # 해시태그 통계 추가
    data['hashtag_analysis'] = {
        'overall_stats': {
            'total_videos_processed': total_videos,
            'successful_updates': successful_updates,
            'success_rate': f"{successful_updates/total_videos*100:.1f}%",
            'total_unique_hashtags': len(all_hashtags),
            'timestamp': time.strftime("%Y-%m-%d %H:%M:%S")
        },
        'category_stats': category_stats,
        'top_hashtags_overall': dict(sorted(all_hashtags.items(), key=lambda x: x[1], reverse=True)[:20])
    }
    
    # 결과 저장
    output_file = 'tiktok_all_categories_120_videos_with_hashtags_final.json'
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    
    print(f"\n{'='*70}")
    print(f"120개 비디오 해시태그 수집 완료!")
    print(f"{'='*70}")
    print(f"결과 파일: {output_file}")
    print(f"전체 비디오: {total_videos}개")
    print(f"해시태그 수집 성공: {successful_updates}개")
    print(f"성공률: {successful_updates/total_videos*100:.1f}%")
    print(f"총 유니크 해시태그: {len(all_hashtags)}개")
    
    print(f"\n카테고리별 결과:")
    for cat_name, cat_stat in category_stats.items():
        print(f"  {cat_name}: {cat_stat['successful_updates']}/{cat_stat['total_videos']}개 성공 ({cat_stat['unique_hashtags']}개 해시태그)")
    
    # 전체 상위 해시태그
    print(f"\n전체 상위 해시태그:")
    top_hashtags = sorted(all_hashtags.items(), key=lambda x: x[1], reverse=True)[:15]
    for hashtag, count in top_hashtags:
        try:
            print(f"  {hashtag}: {count}회")
        except:
            print(f"  [특수문자]: {count}회")
    
    print(f"\n완료 시간: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    return data

if __name__ == "__main__":
    result = add_hashtags_to_120_videos()
    print("\n120개 비디오 해시태그 수집 완료!")