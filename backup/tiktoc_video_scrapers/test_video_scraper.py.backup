#!/usr/bin/env python3
"""
TikTok Creative Center - Video 스크래퍼 테스트 버전
작은 샘플 데이터로 빠른 테스트
"""

import time
from playwright.sync_api import sync_playwright
from bs4 import BeautifulSoup
import json
import sys
import os

def test_video_scraping():
    """
    5개 정도의 비디오로 빠른 테스트
    """
    target_url = "https://ads.tiktok.com/business/creativecenter/inspiration/popular/pc/en"
    
    print("TikTok 비디오 스크래퍼 테스트 시작...")
    print(f"URL: {target_url}")
    print("목표: 첫 5개 비디오 테스트")
    
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False)
        page = browser.new_page()
        
        try:
            print("\n페이지 로딩...")
            page.goto(target_url, timeout=30000)
            page.wait_for_timeout(5000)
            
            print("페이지 로딩 완료")
            
            # 페이지 스크롤
            page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
            page.wait_for_timeout(2000)
            
            # HTML 가져오기
            html_content = page.content()
            soup = BeautifulSoup(html_content, 'html.parser')
            
            print("HTML 파싱 완료")
            
            # 다양한 셀렉터로 아이템 찾기
            selectors_to_try = [
                "div[class*='ItemCard']",
                "div[class*='item']", 
                "div[class*='video']",
                "div[class*='content']",
                ".item",
                "[data-testid*='item']"
            ]
            
            items_found = []
            for selector in selectors_to_try:
                items = soup.select(selector)
                if items and len(items) >= 3:
                    items_found = items
                    print(f"아이템 발견: {selector} - {len(items)}개")
                    break
            
            if not items_found:
                print("특정 셀렉터로 아이템을 찾지 못함. 모든 div 검사...")
                # 이미지와 링크가 있는 div들 찾기
                all_divs = soup.select("div")
                for div in all_divs:
                    if div.select("img") and div.select("a"):
                        items_found.append(div)
                
                print(f"이미지+링크 있는 div: {len(items_found)}개")
            
            if items_found:
                print(f"\n총 {len(items_found)}개 아이템 발견")
                
                # 첫 5개 아이템 분석
                videos = []
                for i, item in enumerate(items_found[:5]):
                    print(f"\n=== 아이템 {i+1} 분석 ===")
                    
                    # 이미지 (썸네일)
                    images = item.select("img")
                    thumbnail = ""
                    if images:
                        thumbnail = images[0].get('src', '')
                        if thumbnail.startswith('//'):
                            thumbnail = 'https:' + thumbnail
                        print(f"썸네일: {thumbnail[:50]}...")
                    
                    # 링크 (비디오 URL)
                    links = item.select("a")
                    video_url = ""
                    if links:
                        video_url = links[0].get('href', '')
                        if video_url.startswith('/'):
                            video_url = 'https://ads.tiktok.com' + video_url
                        print(f"비디오 링크: {video_url[:50]}...")
                    
                    # 텍스트 (해시태그 등)
                    text = item.get_text().strip()
                    hashtags = [word.strip('.,!?') for word in text.split() if word.startswith('#')]
                    print(f"해시태그: {hashtags[:3]}")
                    
                    # 기타 텍스트
                    clean_text = ' '.join(text.split()[:10])  # 첫 10단어
                    print(f"텍스트: {clean_text}...")
                    
                    videos.append({
                        "rank": i + 1,
                        "thumbnail_url": thumbnail,
                        "video_url": video_url,
                        "hashtags": hashtags,
                        "text_preview": clean_text
                    })
                
                # 결과 저장
                result = {
                    "test_time": time.strftime("%Y-%m-%d %H:%M:%S"),
                    "total_found": len(items_found),
                    "sample_videos": videos
                }
                
                with open("test_video_results.json", 'w', encoding='utf-8') as f:
                    json.dump(result, f, ensure_ascii=False, indent=2)
                
                print(f"\n테스트 결과 저장: test_video_results.json")
                print(f"총 {len(videos)}개 비디오 샘플 수집 완료")
                
                # View More 버튼 테스트
                print("\nView More 버튼 찾기...")
                view_more_found = False
                view_more_selectors = [
                    "text=\"View More\"",
                    "button:has-text('View More')",
                    "[class*='view-more']"
                ]
                
                for selector in view_more_selectors:
                    try:
                        view_more = page.query_selector(selector)
                        if view_more and view_more.is_visible():
                            print(f"View More 버튼 발견: {selector}")
                            view_more_found = True
                            break
                    except:
                        continue
                
                if view_more_found:
                    print("View More 기능 사용 가능!")
                else:
                    print("View More 버튼 없음")
                
            else:
                print("아이템을 찾을 수 없습니다.")
                print("페이지 구조:")
                print(soup.get_text()[:300] + "...")
            
            print("\n5초 후 브라우저 종료...")
            page.wait_for_timeout(5000)
            
        except Exception as e:
            print(f"오류 발생: {e}")
        
        finally:
            browser.close()
    
    print("테스트 완료!")

if __name__ == "__main__":
    test_video_scraping()