{
  "permissions": {
    "allow": [
      "Bash(python:*)",
      "Bash(source:*)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:charts.youtube.com)",
      "Bash(timeout 120 python:*)",
      "Bash(rm:*)",
      "Bash(timeout:*)",
      "Bash(mv:*)",
      "Bash(ls:*)",
      "Bash(sqlite3:*)",
      "Bash(mkdir:*)",
      "Bash(git init:*)",
      "Bash(git config:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(playwright install:*)",
      "Bash(find:*)",
      "Bash(pip install:*)",
      "Bash(pip3 list:*)",
      "Bash(node:*)",
      "Bash(npm:*)",
      "Bash(pip uninstall:*)",
      "Bash(PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 python -m playwright install-deps)",
      "Bash(grep:*)",
      "Bash(git rm:*)",
      "Bash(test_env/bin/python:*)",
      "Bash(./check_python.bat)",
      "Bash(./venv/Scripts/python.exe --version)",
      "Bash(./venv/Scripts/python.exe check_collection_status.py:*)",
      "Bash(chcp:*)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe check_collection_status.py)",
      "Bash(./venv/Scripts/python.exe src/database/database_manager.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe -c \"import sqlite3; conn = sqlite3.connect(''data/music_trends.db''); cursor = conn.cursor(); print(''=== 수집 완료 결과 ===''); cursor.execute(''SELECT COUNT(*) FROM songs''); print(f''총 곡 수: {cursor.fetchone()[0]}''); cursor.execute(''SELECT COUNT(*) FROM tiktok_ugc_counts''); print(f''TikTok UGC 수집: {cursor.fetchone()[0]}''); cursor.execute(''SELECT COUNT(*) FROM youtube_ugc_counts''); print(f''YouTube UGC 수집: {cursor.fetchone()[0]}''); cursor.execute(''SELECT COUNT(*) FROM hashtags''); print(f''해시태그 수집: {cursor.fetchone()[0]}''); conn.close()\")",
      "Bash(sed:*)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe -c \"import sqlite3; conn = sqlite3.connect(''data/music_trends.db''); cursor = conn.cursor(); cursor.execute(''SELECT COUNT(*) FROM hashtags''); hashtag_count = cursor.fetchone()[0]; cursor.execute(''SELECT COUNT(*) FROM song_hashtags''); song_hashtag_count = cursor.fetchone()[0]; print(f''hashtags 테이블: {hashtag_count}개''); print(f''song_hashtags 테이블: {song_hashtag_count}개''); conn.close()\")",
      "Bash(./venv/Scripts/python.exe explore_tiktok_videos.py:*)",
      "Bash(PYTHONIOENCODING=utf-8 PYTHONUTF8=1 ./venv/Scripts/python.exe explore_tiktok_videos.py)",
      "Bash(./venv/Scripts/python.exe explore_tiktok_videos_clean.py)",
      "Bash(./venv/Scripts/python.exe tiktok_video_scraper.py)",
      "Bash(./venv/Scripts/python.exe quick_tiktok_explore.py:*)",
      "Bash(./venv/Scripts/python.exe test_video_scraper.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe test_scroll_deeper.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe click_videos_tab.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe analyze_tiktok_content.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe tiktok_video_scraper_final.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe analyze_video_details.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe check_iframe_content.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe fetch_api_data.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe tiktok_video_scraper_with_stats.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe final_complete_scraper.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe tiktok_all_categories_scraper.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe check_sort_dropdown.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe tiktok_all_categories_fixed.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe test_2_categories.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe tiktok_final_4_categories_30each.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe collect_hot_category.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe collect_likes_category.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe collect_comments_category.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe collect_shares_category.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe combine_all_categories.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe add_hashtags_to_videos.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe add_hashtags_batch.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe collect_hashtags_from_page.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe test_single_video_api.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe show_page_to_user.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe collect_shares_with_hashtags.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe research_working_api.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe use_working_api.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe collect_api_hashtags_silent.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe add_hashtags_to_120_videos.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe research_alternative_apis.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe research_api_methods_clean.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe extract_secuid_from_embed.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe final_hashtag_collection.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe research_item_detail_apis.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe test_discovered_apis.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe debug_api_response.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe fixed_secuid_extractor.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe extract_hashtags_from_page.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe analyze_page_structure.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe scripts/check_collection_status.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe -c \"import sqlite3; conn = sqlite3.connect(''data/music_trends.db''); cursor = conn.cursor(); cursor.execute(\"\"SELECT name FROM sqlite_master WHERE type=''table''\"\"); tables = cursor.fetchall(); print(''Available tables:'', [t[0] for t in tables]); conn.close()\")",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe -c \"import sqlite3; conn = sqlite3.connect(''data/music_trends.db''); cursor = conn.cursor(); cursor.execute(''SELECT COUNT(*) FROM songs''); songs = cursor.fetchone()[0]; cursor.execute(''SELECT COUNT(*) FROM hashtags''); hashtags = cursor.fetchone()[0]; cursor.execute(''SELECT COUNT(*) FROM song_hashtags''); song_hashtags = cursor.fetchone()[0]; print(f''Songs: {songs}''); print(f''Hashtags: {hashtags}''); print(f''Song-Hashtags: {song_hashtags}''); conn.close()\")",
      "Bash(./venv/Scripts/pip install crawl4ai)",
      "Bash(./venv/Scripts/python.exe -m pip install crawl4ai)",
      "Bash(./venv/Scripts/python.exe -c \"import crawl4ai; print(''Crawl4AI 설치 완료:'', crawl4ai.__version__)\")",
      "Bash(./venv/Scripts/python.exe -m pip:*)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe silent_crawl4ai_test.py)",
      "Bash(set PYTHONIOENCODING=utf-8)",
      "Bash(set PYTHONUTF8=1)",
      "Bash(./venv/Scripts/python.exe:*)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe enhanced_tiktok_scraper.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe debug_page_structure.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe api_direct_scraper.py)",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe -c \"import sqlite3; conn = sqlite3.connect(''data/music_trends.db''); cursor = conn.cursor(); cursor.execute(''SELECT * FROM song_hashtags LIMIT 5''); results = cursor.fetchall(); cursor.execute(''PRAGMA table_info(song_hashtags)''); schema = cursor.fetchall(); print(''song_hashtags 스키마:''); for row in schema: print(f''  {row}''); print(''\\nsong_hashtags 샘플 데이터:''); for row in results: print(f''  {row}''); conn.close()\")",
      "Bash(PYTHONIOENCODING=utf-8 ./venv/Scripts/python.exe analyze_hashtag_failure.py)",
      "Bash(./venv/Scripts/playwright.exe --version)",
      "Bash(./venv/Scripts/playwright.exe install --help)",
      "Bash(./venv/Scripts/playwright.exe install chromium)"
    ],
    "deny": []
  }
}